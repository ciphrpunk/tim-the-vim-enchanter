
                                                  
    "▄▄▄▄▄     ██                  ▄▄              
    "▀▀▀██     ▀▀                  ██              
       "██   ████     ████▄██▄     ▀▀     ▄▄█████▄ 
       "██     ██     ██ ██ ██            ██▄▄▄▄ ▀ 
       "██     ██     ██ ██ ██             ▀▀▀▀██▄ 
 "█▄▄▄▄▄██  ▄▄▄██▄▄▄  ██ ██ ██            █▄▄▄▄▄██ 
  "▀▀▀▀▀    ▀▀▀▀▀▀▀▀  ▀▀ ▀▀ ▀▀             ▀▀▀▀▀▀  
                                                  
                                                  
                                                            
                        "██                                  
                        "▀▀                                  
           "██▄  ▄██   ████     ████▄██▄   ██▄████   ▄█████▄ 
            "██  ██      ██     ██ ██ ██   ██▀      ██▀    ▀ 
            "▀█▄▄█▀      ██     ██ ██ ██   ██       ██       
    "██       ████    ▄▄▄██▄▄▄  ██ ██ ██   ██       ▀██▄▄▄▄█ 
    "▀▀        ▀▀     ▀▀▀▀▀▀▀▀  ▀▀ ▀▀ ▀▀   ▀▀         ▀▀▀▀▀  
                                                            
                                                            
 
" This is my personal customization of Vim
" Feel free to reference it for your own use
"
" Press <space> to open or close a section

" Window Config {{{
" Include filename in window title
autocmd BufEnter * let &titlestring = ' ' . expand("%:p")             
set title
" }}}
" Startup  {{{
set nocompatible
set ttyfast                     " faster screen redraw
set modelines=3                 " check first/last {n} lines for mode
set backspace=indent,eol,start  " enable normal backspace behavior
    " Pathogen {{{
    " load plugins and generate pathogen helptags
    call pathogen#infect()
    call pathogen#helptags()
    " }}}
    " AutoGroups {{{
    augroup configgroup
        " filetype specific settings loaded on start
        autocmd!
        autocmd VimEnter * highlight clear SignColumn
        autocmd BufWritePre *.pl,*.php,*.py,*.js,*.txt,*.hs,*.java,*.md,*.rb,*.c,*.h,*.cpp 
                    \:call <SID>RmTrailingWhitespace()
        autocmd BufEnter *.cls setlocal filetype=java
        autocmd BufEnter Makefile setlocal noexpandtab
        autocmd BufEnter *.sh setlocal tabstop=2
        autocmd BufEnter *.sh setlocal shiftwidth=2
        autocmd BufEnter *.sh setlocal softtabstop=2
    augroup END
    " }}}
" }}}
" Colors {{{
set guifont = "Menlo:12"
" colorscheme badwolf             " uses the badwolf colorscheme
colorscheme molokai              " uses the molokai colorscheme
set background = "dark"
    " Colorschemes {{{
        " Badwolf {{{
        let g:badwolf_darkgutter = 1
        let g:badwolf_tabline = 2
        let g:badwolf_css_props_highlight = 1
        let g:badwolf_html_link_underline = 1
        " }}}
    " }}}
" }}}
" Indentation {{{
    " Tab {{{
    set tabstop=4                   " 4 space tab
    set softtabstop=4               " 4 space tab
    set shiftwidth=4                " 4 space <</>>
    set expandtab                   " use spaces for tabs
    "   }}}
   " Autoindent {{{
    syntax on
    filetype plugin indent on
    set autoindent                  " enable autoindent
    "   }}}
" }}}
" UI Config {{{
set visualbell                  " make it stop making noise
set showmatch                   " higlight matching enclosures
set showcmd                     " show active command
set number                      " show line numbers
set ruler
set nocursorline                " don't highlight line where cursor is
set wildmenu                    " enable tab-completion
" }}}
" Searching {{{
set ignorecase                  " case insensitive search
set smartcase                   " ... unless we REALLY mean it 
""""""""""""""""""""""""""""""""" (makes ignorecase lower-case insensitive)
set incsearch                   " search as characters are entered
set hlsearch                    " highlight all search term matches
set wrapscan                    " no end of file in search, loops back to top
" }}}
" Folding {{{
set foldmethod=syntax           " fold according to language specific syntax
set foldlevelstart=0            " all folds closed on file load
set foldnestmax=10              " don't go more than 10 folds deep
" }}}                               
" Key Mappings {{{
    " Moving around {{{
    " j/k will go up/down wrapped lines
    nnoremap j gj
    nnoremap k gk
    " B/E will send the cursor to the beginning/end of line
    nnoremap B ^
    nnoremap E $
    " Disable default beginning/end of line behavior
    nnoremap $ <nop>
    nnoremap ^ <nop>
    " Selects last inserted text
    nnoremap gV `[v`]
    " space will open/close folds
    noremap <space> za

    onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
    onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
    xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
    onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
    onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
    xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
        " }}}
    " Map Leader tied {{{
    let mapleader="\\"
    " force redraw of screen
    nnoremap <leader>m :silent make\|redraw!\|cw<CR>
    " Check for errors
    nnoremap <leader>c :SyntasticCheck<CR>:Errors<CR>
    " Start NERDTree
    nnoremap <leader>w :NERDTree<CR>
    " Start Gundo
    nnoremap <leader>u :GundoToggle<CR>
    " Start silver searcher
    nnoremap <leader>a :Ag 
    nnoremap <leader>h :A<CR>
    " Toggle number scroll
    nnoremap <leader>l :call ScrollNumber()<CR>
    " Toggle line numbers
    nnoremap <leader>1 :set number!<CR>
    " Clear highlighting
    nnoremap <leader><space> :noh<CR>
    " Save session settings
    nnoremap <leader>s :mksession<CR>
    " going into visual mode on folded code will expand it
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
    vnoremap <C-c> "*y
    " }}}
" }}}
" Plugin Configs {{{
    " Airline {{{
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    set laststatus=2
        " }}}
    " CtrlP {{{
    let g:ctrlp_match_window = 'bottom,order:ttb'
    let g:ctrlp_switch_buffer = 0
    let g:ctrlp_working_path_mode = 0
    let g:ctrlp_custom_ignore = '\vbuild/|dist/|venv/|target/|\.(o|swp|pyc|egg)$'
    " }}}
    " Gundo {{{
    if has("python3") && !has("python")
        let g:gundo_prefer_python3 = 1
    endif
    " }}}
    " NERDTree {{{
    let NERDTreeIgnore = ['\.pyc$', 'build', 'venv', 'egg', 'egg-info/', 'dist', 'docs']
    " }}}
    " Syntastic {{{
    let g:syntastic_python_flake8_args='--ignore=E501'
    let g:syntastic_ignore_files = ['.java$']
    " }}}
    " Tabular {{{
    nnoremap <leader>a= :Tabularize /=<CR>
    vnoremap <leader>a= :Tabularize /=<CR>
    nnoremap <leader>a: :Tabularize /:\zs<CR>
    vnoremap <leader>a: :Tabularize /:\zs<CR>
    " }}}
    " Neocomplete {{{
        " General {{{
        " Disable AutoComplPop.
        let g:acp_enableAtStartup = 0
        " Use neocomplete.
        let g:neocomplete#enable_at_startup = 1
        " Use smartcase.
        let g:neocomplete#enable_smart_case = 1
        let g:neocomplete#enable_camel_case = 1
        " Use fuzzy completion
        let g:neocomplete#enable_fuzzy_completion = 1
        " Set minimum syntax keyword length.
        let g:neocomplete#auto_completion_start_length = 2
        " Set manual completion length.
        let g:neocomplete#manual_completion_start_length = 0
        " Set minimum keyword length
        let g:neocomplete#sources#syntax#min_keyword_length = 3
        " No more down arrow
        let g:neocomplete#enable_auto_select = 1
        let g:neocomplete#enable_cursor_hold_i = 0
        let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
        " Define dictionary.
        let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }
        let g:neocomplete#enable_auto_delimiter = 1
        let g:neocomplete#disable_auto_select_buffer_name_pattern =
              \ '\[Command Line\]'
        let g:neocomplete#enable_auto_close_preview = 1
        let g:neocomplete#max_list = 100
        " }}}
        " Patterns {{{
            " Keyword {{{
            " Define keyword.
            if !exists('g:neocomplete#keyword_patterns')
                let g:neocomplete#keyword_patterns = {}
            endif
            let g:neocomplete#keyword_patterns['default'] = '\h\w*'
            " }}}
            " Functions {{{ 
            if !exists('g:neocomplete#sources#omni#functions')
                let g:neocomplete#sources#omni#functions = {}
            endif
            " }}}
            " Input {{{
            " Enable heavy omni completion.
            if !exists('g:neocomplete#sources#omni#input_patterns')
                let g:neocomplete#sources#omni#input_patterns = {}
            endif
            let g:neocomplete#sources#omni#input_patterns.c = '\%(\.\|->\)\h\w*'
            let g:neocomplete#sources#omni#input_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
            let g:neocomplete#sources#omni#input_patterns.python = '[^. *\t]\.\w*\|\h\w*'
            let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::\h\w*'
            if !exists('g:neocomplete#force_omni_input_patterns')
                let g:neocomplete#force_omni_input_patterns = {}
            endif
            " Omnicomplete {{{
            " Enable omni completion.
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
            autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
            autocmd FileType java setlocal omnifunc=javacomplete#Complete            
            autocmd FileType pl set omnifunc=perlcomplete#perlomni
            " }}}
            " }}}
        " }}}
        " Mappings {{{
            " <C-f>, <C-b>: page move {{{
            inoremap <expr><C-f>  pumvisible() ? "\<PageDown>" : "\<Right>"
            inoremap <expr><C-b>  pumvisible() ? "\<PageUp>"   : "\<Left>"
            " }}}
            " <C-h>, <BS>: close popup and delete backword char {{{ 
            inoremap <expr> <C-h> neocomplete#smart_close_popup()."\<C-h>"
            inoremap <expr> <BS> neocomplete#smart_close_popup()."\<C-h>"
            " }}}
            " <C-n>: neocomplete {{{ 
            inoremap <expr> <C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>\<Down>"
            " }}}
            " <C-p>: keyword completion  {{{
            inoremap <expr> <C-p>  pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
            inoremap <expr> '  pumvisible() ? "\<C-y>" : "'"
            inoremap <silent><expr> <C-x><C-f>
                    \ neocomplete#start_manual_complete('file')
            inoremap <silent><expr> <C-x><C-l>
                    \ neocomplete#start_manual_complete('look')
            inoremap <expr> <C-g>     neocomplete#undo_completion()
            inoremap <expr> <C-l>     neocomplete#mappings#refresh()
            inoremap <expr> <C-l>     neocomplete#mappings#complete_common_string()
            " <CR>: close popup and save indent 
            inoremap <silent> <CR> <C-r>=<SID>MyCrFunction()<CR>
            "}}}
            " <TAB>: completion {{{ 
            " inoremap <silent><expr> <TAB>
            "        \ pumvisible() ? "\<C-n>" :
            "        \ <SID>CheckBackSpace() ? "\<TAB>" :
            "        \ neocomplete#start_manual_complete()
            "}}}
            " <S-TAB>: completion back {{{ 
            " inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
            " }}}
            " Fallback{{{
            let g:neocomplete#fallback_mappings = ["\<C-x>\<C-o>", "\<C-x>\<C-n>"]
            " }}}
        " }}}
        " JavaComplete {{{
            " Mappings {{{
            " Enable smart (trying to guess import option) inserting class imports with <F4>
            nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
            imap <F4> <Plug>(JavaComplete-Imports-AddSmart)

            " Enable usual (will ask for import option) inserting class imports with <F5>
            nmap <F5> <Plug>(JavaComplete-Imports-Add)
            imap <F5> <Plug>(JavaComplete-Imports-Add)

            " Add all missing imports with <F6>
            nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
            imap <F6> <Plug>(JavaComplete-Imports-AddMissing)

            " Remove all missing imports with <F7>
            nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
            imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
            " }}}
            " Generators {{{
            nmap <leader>jM <Plug>(JavaComplete-Generate-AbstractMethods)
            nmap <leader>jA <Plug>(JavaComplete-Generate-Accessors)
            nmap <leader>js <Plug>(JavaComplete-Generate-AccessorSetter)
            nmap <leader>jg <Plug>(JavaComplete-Generate-AccessorGetter)
            nmap <leader>ja <Plug>(JavaComplete-Generate-AccessorSetterGetter)
            nmap <leader>jts <Plug>(JavaComplete-Generate-ToString)
            nmap <leader>jeq <Plug>(JavaComplete-Generate-EqualsAndHashCode)
            nmap <leader>jc <Plug>(JavaComplete-Generate-Constructor)
            nmap <leader>jcc <Plug>(JavaComplete-Generate-DefaultConstructor)
            vmap <leader>js <Plug>(JavaComplete-Generate-AccessorSetter)
            vmap <leader>jg <Plug>(JavaComplete-Generate-AccessorGetter)
            vmap <leader>ja <Plug>(JavaComplete-Generate-AccessorSetterGetter)
            imap <C-j>jM <Plug>(JavaComplete-Generate-AbstractMethods)
            imap <C-j>s <Plug>(JavaComplete-Generate-AccessorSetter)
            imap <C-j>g <Plug>(JavaComplete-Generate-AccessorGetter)
            imap <C-j>a <Plug>(JavaComplete-Generate-AccessorSetterGetter)
            " }}}
        " }}}
    " }}}
" }}}
" Custom Functions {{{ 
function! <SID>SaveUIStateAndProcess(cmd)
    let _s=@/ 
    let l=line(".")
    let c=col(".")
    execute a:cmd
    let @/=_s
    call cursor(l,c)
endfunction

" ::RmTrailingWhitespace
function! <SID>RmTrailingWhitespace()
    call s:SaveUIStateAndProcess("%s/\s\+$//e")
    call s:SaveUIStateAndProcess("normal gg=G")
endfunction


function! <SID>CleanFile()
	call s:SaveUIStateAndProcess("%!git stripspace")
endfunction

" ::ScrollNumber
" Toggles whether we want to scroll line numbers with cursor with a range above and below
function! ScrollNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunction

function! s:NextTextObject(motion,dir)
	let c=nr2char(getchar())
	if c==#"b"
        let c="("
	elseif c==#"B"
        let c="{"
	elseif c==#"r" 
        let c="["
	endif
	exe "normal! ".a:dir.c."v".a:motion.c
endfunction

function! s:MyCrFunction() abort
    return neocomplete#smart_close_popup() . "\<CR>"
endfunction

function! s:CheckBackSpace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction
"}}}
" Modeline {{{
" vim: foldmethod=marker:foldlevel=0
" }}}
